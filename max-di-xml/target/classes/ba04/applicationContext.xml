<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


    <!--
     引用类型的自动注入:spring框架根据某些规则可以给引用类型赋值。不用自己再给引用数据类型赋值了
     使用的规则常用的是byName,byType.
     1.byName(安名称注入):java类中引用类型的属性名和spring容器中的（配置文件）<bean>的id名称一样，
                        且数据类型是一致的，这样的容器中的bean,spring能够赋值给引用类型。

     2.byType(按类型注入):java类中引用类型的数据类型和spring容器中（配置文件）<bean>的class属性
                        是同源关系，这样的bean能够赋值给引用类型
       同源就是一类的意思
       1.java类中引用类型的数据类型和bean的class的值是一致的。
       2.java类中引用类型的数据类型和bean的class的值是父子类关系。
       3.java类中引用类型的数据类型和bean的class的值是接口和实现类关系的。
       <bean id="xx" class="yyy" autowire="byType"></bean>

    -->
            <bean id="myStudent" class="com.ba04.Student"  autowire="byType">
                <property name="name" value="刘鑫鸿" />
                <property name="age" value="250" />
                <!--   <property name="school" ref="mySchool" /> -->

            </bean>

            <!-- 声明School对象 byName
            <bean id="school" class="com.ba04.School" >
                <property name="name" value="智障儿童残疾人大学附属小学" />
                <property name="address" value="二仙桥消防总队的隔壁~" />
            </bean>
            -->
          <!-- 声明School对象 byType  第一种情况
           <bean id="mySchool" class="com.ba04.School" >
               <property name="name" value="智障儿童残疾人大学附属小学" />
               <property name="address" value="二仙桥消防总队的隔壁~" />
            </bean> -->

            <!-- 子类可以继承父类的属性和公共方法-->
            <bean id="primarySchool" class="com.ba04.PrimarySchool">
                <property name="name" value="听说这是个小学" />
                <property name="address" value="这是它的地址" />
            </bean>


</beans>